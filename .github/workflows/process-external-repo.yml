# .github/workflows/consolidate-to-markdown-split.yml

name: Consolidate to Split Markdown Files

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: '要處理的 Public 倉庫 URL (例如: https://github.com/facebook/docusaurus)'
        required: true
        type: string
      file_extensions:
        description: '要包含的副檔名清單 (用空格分隔)'
        required: true
        default: '.js .ts .jsx .tsx .py .md .mdx'
        type: string
      output_filename_base:
        description: '輸出的 Markdown 檔案基礎名稱 (不需加 .md 或 part)'
        required: true
        default: 'consolidated-docs'
      max_size_mb:
        description: '每個分片檔案的最大大小 (MB)。NotebookLM 建議 5MB 以下。'
        required: true
        default: '4'
        type: string

jobs:
  build-and-split-markdown:
    runs-on: ubuntu-latest
    steps:
      - name: Clone external repository
        run: |
          mkdir external_repo
          cd external_repo
          git clone --depth 1 ${{ github.event.inputs.repo_url }} .

      - name: Consolidate and Split to Markdown files
        run: |
          cd external_repo
          mkdir ../output_parts
          
          MAX_SIZE_BYTES=$((${{ github.event.inputs.max_size_mb }} * 1024 * 1024))
          FILENAME_BASE="${{ github.event.inputs.output_filename_base }}"
          PART_NUMBER=1
          CURRENT_SIZE=0
          
          # 💡 優化：使用 Process Substitution (< <(find...)) 來避免 pipeline 中的 subshell 問題
          # 這能確保 PART_NUMBER 的值在迴圈結束後依然有效。
          while IFS= read -r -d $'\0' file; do
            should_include=false
            for ext in ${{ github.event.inputs.file_extensions }}; do
              if [[ "$file" == *"$ext" ]]; then
                should_include=true
                break
              fi
            done
            
            if [ "$should_include" = true ]; then
              FILE_SIZE=$(stat -c%s "$file")

              if (( CURRENT_SIZE + FILE_SIZE > MAX_SIZE_BYTES && CURRENT_SIZE > 0 )); then
                PART_NUMBER=$((PART_NUMBER + 1))
                CURRENT_SIZE=0
              fi
              
              OUTPUT_FILE="../output_parts/${FILENAME_BASE}_part_${PART_NUMBER}.md"
              
              if [ $CURRENT_SIZE -eq 0 ]; then
                # 🔥 修正：為所有重新導向加上雙引號
                echo "# ${FILENAME_BASE} (Part ${PART_NUMBER})" > "${OUTPUT_FILE}"
                echo "來源倉庫: <${{ github.event.inputs.repo_url }}>" >> "${OUTPUT_FILE}"
                echo "***" >> "${OUTPUT_FILE}"
              fi

              # 🔥 修正：為所有重新導向加上雙引號
              echo -e "\n\n## 檔案: \`${file}\`" >> "${OUTPUT_FILE}"

              if [[ "$file" == *.md || "$file" == *.markdown || "$file" == *.mdx ]]; then
                echo -e "\n" >> "${OUTPUT_FILE}"
                # 🔥 修正：為所有重新導向加上雙引號
                cat "${file}" >> "${OUTPUT_FILE}"
              else
                lang="${file##*.}"
                echo -e "\n\`\`\`${lang}" >> "${OUTPUT_FILE}"
                # 🔥 修正：為所有重新導向加上雙引號
                cat "${file}" >> "${OUTPUT_FILE}"
                echo -e "\n\`\`\`" >> "${OUTPUT_FILE}"
              fi
              
              # 🔥 修正：為所有變數使用加上雙引號
              CURRENT_SIZE=$(stat -c%s "${OUTPUT_FILE}")
            fi
          done < <(find . -type f -print0) # 💡 優化：find 的輸出從這裡導入迴圈
          
          echo "Splitting complete. Generated ${PART_NUMBER} parts with base name '${FILENAME_BASE}'."

      - name: Upload all Markdown parts as a single artifact
        uses: actions/upload-artifact@v4
        with:
          name: markdown-parts-for-${{ github.event.inputs.output_filename_base }}
          path: output_parts/
